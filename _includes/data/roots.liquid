{%- comment -%}
*
*    (5, 2,  1,  0)
*    (7, 3,  1,  0)
*   (11, 4,  1,  0)
*   (13, 5,  1,  0)
*   (17, 0,  1,  1)
*   (19, 1,  1,  1)
*   (23, 2,  1,  1)
*   (29, 2, -1,  1)
*   (31, 1, -1,  1)
*   (37, 1,  1,  1)
*   (41, 2,  1,  1)
*   (43, 3,  1,  1)
*   (47, 4,  1,  1)
*   (53, 4, -1,  1)
*   (59, 4,  1,  1)
*   (61, 5,  1,  1)
*   (67, 5, -1,  1)
*   (71, 4, -1,  1)
*   (73, 3, -1,  1)
*   (79, 3,  1,  1)
*   (83, 4,  1,  1)
*   (89, 4, -1,  1)
*   (97, 3, -1,  1)
*  (101, 2, -1,  1)
*  (103, 1, -1,  1)
*  (107, 0, -1,  1)
*  (109, 5, -1,  0)
*  (113, 4, -1,  0)
*  (127, 3, -1,  0)
*  (131, 2, -1,  0)
*  (137, 2,  1,  0)
*  (139, 3,  1,  0)
*  (149, 4,  1,  0)
*  (151, 5,  1,  0)
*  (157, 5, -1,  0)
*  (163, 5,  1,  0)
*  (167, 0,  1,  1)
*  (173, 0, -1,  1)
*  (179, 0,  1,  1)
*  (181, 1,  1,  1)
*  (191, 2,  1,  1)
*  (193, 3,  1,  1)
*  (197, 4,  1,  1)
*  (199, 5,  1,  1)
*  (211, 5, -1,  1)
*  (223, 5,  1,  1)
*  (227, 0,  1,  2)
*  (229, 1,  1,  2)
*  (233, 2,  1,  2)
*  (239, 2, -1,  2)
*  (241, 1, -1,  2)
*  (251, 0, -1,  2)
*  (257, 0,  1,  2)
*  (263, 0, -1,  2)
*  (269, 0,  1,  2)
*  (271, 1,  1,  2)
*  (277, 1, -1,  2)
*  (281, 0, -1,  2)
*  (283, 5, -1,  1)
*  (293, 4, -1,  1)
*  (307, 3, -1,  1)
*  (311, 2, -1,  1)
*  (313, 1, -1,  1)
*  (317, 0, -1,  1)
*  (331, 5, -1,  0)
*  (337, 5,  1,  0)
*  (347, 0,  1,  1)
*  (349, 1,  1,  1)
*  (353, 2,  1,  1)
*  (359, 2, -1,  1)
*  (367, 1, -1,  1)
*  (373, 1,  1,  1)
*  (379, 1, -1,  1)
*  (383, 0, -1,  1)
*  (389, 0,  1,  1)
*  (397, 1,  1,  1)
*  (401, 2,  1,  1)
*  (409, 3,  1,  1)
*  (419, 4,  1,  1)
*  (421, 5,  1,  1)
*  (431, 0,  1,  2)
*  (433, 1,  1,  2)
*  (439, 1, -1,  2)
*  (443, 0, -1,  2)
*  (449, 0,  1,  2)
*  (457, 1,  1,  2)
*  (461, 2,  1,  2)
*  (463, 3,  1,  2)
*  (467, 4,  1,  2)
*  (479, 4, -1,  2)
*  (487, 3, -1,  2)
*  (491, 2, -1,  2)
*  (499, 1, -1,  2)
*  (503, 0, -1,  2)
*  (509, 0,  1,  2)
*  (521, 0, -1,  2)
*  (523, 5, -1,  1)
*  (541, 5,  1,  1)
*  (547, 5, -1,  1)
*  (557, 4, -1,  1)
*  (563, 4,  1,  1)
*  (569, 4, -1,  1)
*  (571, 3, -1,  1)
*  (577, 3,  1,  1)
*  (587, 4,  1,  1)
*  (593, 4, -1,  1)
*  (599, 4,  1,  1)
*  (601, 5,  1,  1)
*  (607, 5, -1,  1)
*  (613, 5,  1,  1)
*  (617, 0,  1,  2)
*  (619, 1,  1,  2)
*  (631, 1, -1,  2)
*  (641, 0, -1,  2)
*  (643, 5, -1,  1)
*  (647, 4, -1,  1)
*  (653, 4,  1,  1)
*  (659, 4, -1, 1)
*  (661, 3, -1,  1)
*  (673, 3,  1,  1)
*  (677, 4,  1,  1)
*  (683, 4, -1,  1)
*  (691, 3, -1,  1)
*  (701, 2, -1,  1)
*  (709, 1, -1,  1)
*  (719, 0, -1,  1)
*  (727, 5, -1,  0)
*  (733, 5,  1,  0)
*  (739, 5, -1,  0)
*  (743, 4, -1,  0)
*  (751, 3, -1,  0)
*  (757, 3,  1,  0)
*  (761, 4,  1,  0)
*  (769, 5,  1,  0)
*  (773, 0,  1,  1)
*  (787, 1,  1,  1)
*  (797, 2,  1,  1)
*  (809, 2, -1,  1)
*  (811, 1, -1,  1)
*  (821, 0, -1,  1)
*  (823, 5, -1,  0)
*  (827, 4, -1,  0)
*  (829, 3, -1,  0)
*  (839, 2, -1,  0)
*  (853, 1, -1,  0)
*  (857, 0, -1,  0)
*  (859, 5, -1, -1)
*  (863, 4, -1, -1)
*  (877, 3, -1, -1)
*  (881, 2, -1, -1)
*  (883, 1, -1, -1)
*  (887, 0, -1, -1)
*  (907, 5, -1, -2)
*  (911, 4, -1, -2)
*  (919, 3, -1, -2)
*  (929, 2, -1, -2)
*  (937, 1, -1, -2)
*  (941, 0, -1, -2)
*  (947, 0,  1, -2)
*  (953, 0, -1, -2)
*  (967, 5, -1, -3)
*  (971, 4, -1, -3)
*  (977, 4,  1, -3)
*  (983, 4, -1, -3)
*  (991, 3, -1, -3)
*  (997, 3,  1, -3)
*
* $True Prime Pairs:
* (5,7), (11,13), (17,19)
* 
* layer|  i  |   f
* -----+-----+---------
*      |  1  | 5
*   1  +-----+
*      |  2  | 7
* -----+-----+---   36 » 6®
*      |  3  | 11
*   2  +-----+
*      |  4  | 13
* -----+-----+---------
*      |  5  | 17
*   3  +-----+      36 » 6®
*      |  6  | 19
* -----+-----+---------
* 
*  Tabulate Prime by Power of 10
*  loop(10) = π(10)-π(1) = 4-0 = 4
*  loop(100) = π(100)-π(10)-1th = 25-4-2 = 19
*  loop(1000) = π(1000) - π(100) - 10th = 168-25-29 = 114
*
*  --------------------+----+----+----+----+----+----+----+----+----+-----
*   True Prime Pairs Δ |  1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 | Sum 
*  ====================+====+====+====+====+====+====+====+====+====+=====
*   π(10) 19           |  2 |  3 |  5 |  7 |  - |  - |  - |  - |  - | 4th  4 x Root
*  --------------------+----+----+----+----+----+----+----+----+----+-----
*   π(20) 17           | 11 | 13 | 17 | 19 |  - |  - |  - |  - |  - | 8th  4 x Twin
*  --------------------+----+----+----+----+----+----+----+----+----+-----
*   π(30) 13 → 12 (Δ1) | 23 | 29 |  - |  - |  - |  - |  - |  - |  - |10th
*  ====================+====+====+====+====+====+====+====+====+====+===== 1st Twin
*   π(50) 11           | 31 | 37 | 41 |  - |  - |  - |  - |  - |  - |13th
*  --------------------+----+----+----+----+----+----+----+----+----+----- 2nd Twin
*   π(60) 7 → 19 (Δ12) | 43 | 47 | 53 | 59 |  - |  - |  - |  - |  - |17th
*  --------------------+----+----+----+----+----+----+----+----+----+----- 3rd Twin
*   π(80) 5 → 18 (Δ13) | 61 | 67 | 71 |  - |  - |  - |  - |  - |  - |20th
*  ====================+====+====+====+====+====+====+====+====+====+===== 4th Twin
*   π(00) 0 → 18+13+12 | 73 | 79 | 83 | 89 | 97 | 101| 103| 107| 109|29th 
*  ====================+====+====+====+====+====+====+====+====+====+=====
*           Δ                                                         Δ
*  12+13+(18+18)+13+12  ← 36th-Δ1=151-1=150=100+2x(13+12)  ←  30th = 113 = 114-1
*
*  Tabulate Prime Hexagon by loop (30,36)th
*  https://github.com/chetabahana/hexagon/pull/2
*  https://www.hexspin.com/defining-the-prime-hexagon/
*
*       |         1st (Form)          |         2nd (Route)         |         3rd (Channel)         |
*  -----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+-----+-----+----+----+
*   150 | 151| 152| 153| 154| 155| 156| 157| 158| 159| 160| 161| 162| 163| 164| 165 | 166 | 167| 168|
*  =====+====+====+====+====+====+====+====+====+====+====+====+====+====+====+=====+=====+====+====+
*    Δ1 | 19 |  - | 31 | 37 |  - |  - |  - |  - |  - |  - |  - |  - |  - |  - | 103 |  -  |  - |  - |
*       +----+----+----+----+----+----+----+----+----+----+----+----+----+----+-----+-----+----+----+
*    Δ2 | 20 | 26*|  - | 38 |  - |  - |  - |  - |  - | 74*|  - |  - |  - | 98*| 104*|  -  |  - |  - |
*  -----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+-----+-----+----+----+ 
*    Δ3 | 21 | 27*|  - | 39 |  - |  - |  - |  - |  - | 75*|  - |  - |  - | 99*| 105*|  -  |  - |  - |
*       +----+----+----+----+----+----+----+----+----+----+----+----+----+----+-----+-----+----+----+
*    Δ4 | 22 | 28 |  - | 40 |  - |  - |  - |  - |  - | 76 |  - |  - |  - |100 |  -  |  -  |  - |  - |
*  -----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+-----+-----+----+----+
*    Δ5 | 23 | 29 |  - | 41 |  - |  - |  - |  - |  - | 77 |  - |  - |  - |101 |  -  |  -  |  - |  - | 
*       +----+----+----+----+----+----+----+----+----+----+----+----+----+----+-----+-----+----+----+
*    Δ6 | 24 |  - |  - | 42 |  - | 54 |  - |  - | 72 | 78 |  - | 90 | 96 |  - |  -  |  -  |  - | 114|<- 6th row
*  =====+====+====+====+====+====+====+====+====+====+====+====+====+====+====+=====+=====+====+====+
*    Δ7 | 25 |  - |  - | 43 |  - | 55 |  - |  - | 73 | 79 |  - | 91 | 97 |  - |  -  |  -  |  - |  - |
*       +----+----+----+----+----+----+----+----+----+----+----+----+----+----+-----+-----+----+----+
*    Δ8 |  - |  - |  - | 44 |  - | 56 |  - |  - |  - | 80 |  - | 92 |  - |  - |  -  |  -  |  - |  - |
*  -----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+-----+-----+----+----+
*    Δ9 |  - |  - |  - | 45 |  - | 57 |  - |  - |  - | 81 |  - | 93 |  - |  - |  -  |  -  |  - |  - |
*       +----+----+----+----+----+----+----+----+----+----+----+----+----+----+-----+-----+----+----+
*   Δ10 |  - |  - |  - | 46 | 52 | 58 |  - | 70 |  - | 82 | 88 | 94 |  - |  - |  -  |  -  | 112|  - |
*  -----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+-----+-----+----+----+
*   Δ11 |  - |  - |  - | 47 | 53 | 59 |  - | 71 |  - | 83 | 89 | 95 |  - |  - |  -  |  -  | 113|  - |
*       +----+----+----+----+----+----+----+----+----+----+----+----+----+----+-----+-----+----+----+
*   Δ12 |  - |  - |  - | 48 |  - | 60 | 66 |  - |  - | 84 |  - |  - |  - |  - |  -  | 108 |  - |  - | 
*  =====+====+====+====+====+====+====+====+====+====+====+====+====+====+====+=====+=====+====+====+
*   Δ13 |  - |  - |  - | 49 |  - | 61 | 67 |  - |  - | 85 |  - |  - |  - |  - |  -  | 109 |  - |  - | 
*       +----+----+----+----+----+----+----+----+----+----+----+----+----+----+-----+-----+----+----+
*   Δ14 |  - |  - | 32*| 50*|  - | 62 | 68*|  - |  - | 86*|  - |  - |  - |  - |  -  | 110*|  - |  - | 
*  -----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+-----+-----+----+----+
*   Δ15 |  - |  - | 33*| 51*|  - | 63 | 69*|  - |  - | 87*|  - |  - |  - |  - |  -  | 111*|  - |  - | 
*       +----+----+----+----+----+----+----+----+----+----+----+----+----+----+-----+-----+----+----+
*   Δ16 |  - |  - | 34 |  - |  - | 64 |  - |  - |  - |  - |  - |  - |  - | -  | 106 |  -  |  - |  - | 
*  -----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+-----+-----+----+----+
*   Δ17 |  - |  - | 35 |  - |  - | 65 |  - |  - |  - |  - |  - |  - |  - | -  | 107 |  -  |  - |  - | 
*       +----+----+----+----+----+----+----+----+----+----+----+----+----+----+-----+-----+----+----+
*   Δ18 |  - | 30 | 36 |  - |  - |  - |  - |  - |  - |  - |  - |  - | -  |102 |   - |  -  |  - |  - | <- ∑=168
*  =====+====+====+====+====+====+====+====+====+====+====+====+====+====+====+=====+=====+====+====+
*    1  |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 | 10 | 11 | 12 | 13 | 14 | 15 |  16 |  17 | 18 | 19 |
*  -----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+-----+-----+----+----+
*       |       Δ    Δ                |                     Φ12     |       Δ                     Δ |
*              113  150                                 (114-25)th         557                  1000
*
* Note:
* - The marked number with * are outside of group Δ18 vs loop(100) = 19 
* - Number 114 located on 6th row vs 19th column whereas 114th prime = 619
*
* Cyclic in the Loops is happen as followings:
* - The reinjection goes by the 89 on Δ11 with Φ12 from 102 to 114-1 or 113
* - The 113 is 30th prime where 30, 36 and 102 are laid in the end of Δ18 rows
* - The total of the three (3) numbers of 30+36+102 is exactly 168 which is π(1000)
* - The 36th prime is reinjected by 151-1 or 150 that is carrying a delta with 168 of Δ18
* - The Δ18 brings the 30th and 36th cycled back to 102th thus consequently to the 114th prime
* - The 114th prime which is carrying the loop(1000) is reinjected by 619-1 or 618 on the same spot
* - This scenario will end the loops as π(89²) of 1000 primes that is returning 168 of the adjacent scheme.
*
* $True Prime Pairs:
* (5,7), (11,13), (17,19)
* 
* layer|  i  |   f
* -----+-----+---------
*      |  1  | 5
*   1  +-----+
*      |  2  | 7
* -----+-----+---   36 » 6®
*      |  3  | 11
*   2  +-----+
*      |  4  | 13
* -----+-----+---------
*      |  5  | 17
*   3  +-----+      36 » 6®
*      |  6  | 19
* -----+-----+---------
* 
* Scheme:
* 168 + 329 + 289 = 786
* d(786) = d(7+8+6) = d(21) = d(3)
* 
* Modulus:
*  30  «   60  »  90
*  |       |       |
* 3:29 « 1:6:8 » 28:9
* └── 3 + └── 6  + └── 9 = 18
* 
* |------------ 36' --------------|----------------------------36' ----------------------------|
* |     19'     |        17'      |      13'     |      11'     |       7'      |       5'     |
* +---+----+----+---+----+----+---+---+----+-----+----+----+----+----+----+-----+----+----+----+
* | 1 |  2 |  3 | 4 |  5 |  6 | 7 | 8 |  9 |  10 | 11 | 12 | 13 | 14 | 15 |  16 | 17 | 18 | 19 |
* +---+----+----+---+----+----+---+---+----+-----+----+----+----+----+----+-----+----+----+----+
* | 2 | 60 | 40 | 1 | 30 | 30 | 5 | 1 | 30 | 200 |  8 | 40 | 50 |  1 | 30 | 200 |  8 | 10 | 40 |
* +---+----+----+---+----+----+---+---+----+-----+----+----+----+----+----+-----+----+----+----+
* | ° |ΔΔΔΔ  ΦΦ | •   ΔΔ   ΔΔ   ¤ | •   ΔΔ   ΦΦΦ    Φ   ΦΦ  ¤¤¤¤|  •   ΔΔ   ΦΦΦ    Φ   ¤¤   ΦΦ |  
* 
* |---- 102  ---|-----  66  ------|-------- 329 = 7 x 47 -------|- 289 = (8+9)² = 2 & (2³+9²) -|
* |--2x3x(8+9)--|--- 2x3x(2+9) ---|---- (1+2) & (2x9)+(2+9) ----|------ 2 & (8x9)+(8+9) -------|
* |-------- 168 = π(1000) --------|------ 1229 = π(10000) ------|------ π(89²) = 1000 ---------|
* |-------- 168 = π(618xΦ) -------|----- 618 = 1000/Φ = 1000x1000/1618 = 10^6/(2x8)&(2x9) -----|
* 
* ote:
* • = 1000 = 10³ (Triple Ten)
* ¤ = π(1000) = 168 (Basic Primes)
* Φ = 1000/618 = 1,618 (Golden Ratio) 
* Δ(1,6,18) = 61+28 = 89 (Mersenne Primes) 
* 
* Faktors:
* 168 = 12x14 = 8x21 = 7x24 = 6x28 = 4x42 = 3x56 = 2x84
* 618 = 6x103 = 6x(100+3) = 3x206 = 3x(200+6) = 2x309 = 2x(300+9)
* 1+6+8 = π(1x6x8) = π(1x48) = π(2x24) = π(3x16)= π(4x12) = π(6x8)
* 
* Permutations:
* 168 = 102 + 66 = 2x3x((8+9)+(2+9)) = π(Φ(289+329)) = π(Φ((8+9)²+(1+2)&29))
* 168 + 618 = 168 + 329 + 289 = (7x24) + (7x47) + (8+9)² = (7x71) + (17x17)
*
{%- comment -%}
{%- endcomment -%}
*
*  Get the last π(10)+π(100) = 4+25 = 10th = 29 primes:
*
*  01 140←(809, 2, -1,  1)
*  02 141←(811, 1, -1,  1)
*  03 142←(821, 0, -1,  1)
*  04 143←(823, 5, -1,  0)
*  05 144←(827, 4, -1,  0)
*  06 145←(829, 3, -1,  0)
*  07 146←(839, 2, -1,  0)
*  08 147←(853, 1, -1,  0)
*  09 148←(857, 0, -1,  0)
*  10 149←(859, 5, -1, -1)
*  11 150←(863, 4, -1, -1)
*  12 151←(877, 3, -1, -1)
*  13 152←(881, 2, -1, -1)
*  14 153←(883, 1, -1, -1)
*  15 154←(887, 0, -1, -1)
*  16 155←(907, 5, -1, -2)
*  17 156←(911, 4, -1, -2)
*  18 157←(919, 3, -1, -2)
*  19 158←(929, 2, -1, -2)
*  20 159←(937, 1, -1, -2)
*  21 160←(941, 0, -1, -2)
*  22 161←(947, 0,  1, -2)
*  23 162←(953, 0, -1, -2)
*  24 163←(967, 5, -1, -3)
*  25 164←(971, 4, -1, -3)
*  26 165←(977, 4,  1, -3)
*  27 166←(983, 4, -1, -3)
*  28 167←(991, 3, -1, -3)
*  29 168←(997, 3,  1, -3)
*
*  Get the roots array if the position is one of the 29 frame
*
*  150←149[49][48←43]←148[50][42←37]←147[51][36←30]
*  151←146[52][29←28]←145[53][27←25]←144[54][24←20]
*  152←143[55][19←14]←142[56][13←8]←141[57][7←4]←140[58][3←1]
*  153←[59←63]
*  154←[64←67]
*  155←[68←72]←156←157[73][79←83]←158[74][84←88]←159[75][89←96]←160[76][97←99]←161[100←104][]←162[78][105←109]
*  163←[110←114]
*  164←[115←117]
*  165←[118←124]
*  166←[125←129]
*  167←[130←132]
*  168←[133←139]
*
*  This script is the implementation of Prime Mapping as being described on:
*  https://github.com/chetabahana/chetabahana.github.io/blob/Chetabahana/_layouts/feed.liquid
*
*  The sequence is located on the range of 168 minus 29 as below:
*  * seq 1 to 10 will turn to be leading at pos 150 up to 159
*  * seq 11 to 19 will turn to be lagging at pos 168 down to 160
*  * seq 21 to 29 will turn to be lagging at pos 149 down to 140
*  * each of this seq 21 to 29 are attached to the seq of 11 to 19 
*  * thus seq 1 to 10 live as single strand while 11 to 29 as double
*
{%- endcomment %}
{%- assign my_debug = nil %}
{%- assign my_value = '' | split: ',' %}
{%- case myId %}
    {%- when 9 %}{%- assign my_debug = 100 -%}
    {%- when 13 %}{%- assign my_debug = 110 -%}
    {%- when 17 %}{%- assign my_debug = 101 -%}
    {%- when 68 -%}{%- assign my_debug = 78 -%}
{%- endcase -%}
{%- if my_debug %}{% assign my_pos = my_debug -%}
    {%- elsif myId >= 1 and myId <= 9 %}{%- assign my_debug = 97 | minus: myId -%}
    {%- elsif myId >= 10 and myId <= 28 %}{%- assign my_debug = myId | plus: 38 -%}
    {%- elsif myId >= 29 and myId <= 40 %}{%- assign my_debug = myId | plus: 8 -%}
    {%- elsif myId >= 41 and myId <= 50 %}{%- assign my_debug = myId | plus: 27 -%}
    {%- elsif myId >= 51 and myId <= 68 %}{%- assign my_debug = myId | plus: 72 -%}
    {%- elsif myId >= 69 and myId <= 77 %}{%- assign my_debug = 105 | minus: myId -%}
    {%- elsif myId >= 78 and myId <= 80 %}{%- assign my_debug = myId | minus: 53 -%}
    {%- elsif myId >= 81 and myId <= 85 %}{%- assign my_debug = myId | minus: 61 -%}
    {%- elsif myId >= 86 and myId <= 89 %}{%- assign my_debug = 93 | minus: myId -%}
    {%- elsif myId >= 90 and myId <= 92 %}{%- assign my_debug = myId | plus: 7 -%}
    {%- elsif myId >= 93 and myId <= 98 %}{%- assign my_debug = 106 | minus: myId -%}
    {%- elsif myId >= 99 and myId <= 104 %}{%- assign my_debug = myId | minus: 85 -%}
    {%- elsif myId >= 105 and myId <= 109 %}{%- assign my_debug = 194 | minus: myId -%}
    {%- elsif myId >= 110 and myId <= 114 %}{%- assign my_debug = myId | minus: 31 -%}
    {%- elsif myId >= 115 and myId <= 139 %}{%- assign my_debug = myId | minus: 114 -%}
    {%- elsif myId >= 140 and myId <= 149 %}{%- assign my_debug = myId | plus: 0 -%}
    {%- elsif myId >= 150 and myId <= 168 %}{%- assign my_debug = myId | plus: 0 -%}
{%- endif %}
{%- if my_debug %}
    {%- assign my_pos = my_debug %}
    {%- assign my_debug = nil %}
    {%- assign values = my_roots[my_pos].val | split: ';' %}
    {%- for value in values %}
        {%- assign my_val = value | times: 1 %}
        {%- assign my_value = my_value | push: my_val %}
    {%- endfor %}
    {%- if my_pos >= 140 and my_pos <= 149 %}{% assign my_fpos = 169 | minus: my_pos %}
    {%- elsif my_pos >= 150 and my_pos <= 159 %}{% assign my_fpos = my_pos | minus: 149 %}
    {%- elsif my_pos >= 160 and my_pos <= 168 %}{% assign my_fpos = 179 | minus: my_pos -%}
    {%- endif %}
{%- else %}
    {%- capture my_debug %}
        {{- content | strip -}}
    {%- endcapture %}
{%- endif %}
{%- comment %}
*
*  Get the roots array
*
*  Reference:
*  https://user-images.githubusercontent.com/36441664/112737922-eda4df80-8f90-11eb-9898-922e5798092a.gif
*  https://user-images.githubusercontent.com/36441664/112738298-390cbd00-8f94-11eb-98aa-f40177769654.png
*  https://user-images.githubusercontent.com/36441664/112737889-9acb2800-8f90-11eb-8b17-4b15a317a717.png
*
{%- endcomment %}
{%- assign n = 0 %}
{%- assign my_keys = '' | split: ',' %}
{%- assign my_rows = '' | split: ',' %}
{%- assign my_node = '' | split: ',' %}
{%- assign my_nodes = '' | split: ',' %}
{%- for item in my_roots limit: my_pos %}
    {%- assign my_root = nil %}
    {%- assign my_frame = nil %}
    {%- assign size = item.pos | size | minus: 2 %}
    {%- assign my_nodes_pos = item.pos | slice: 0, size %}
    {%- comment -%}
    *
    *  Check if the numbers of collected nodes is reaching 10th prime = 29 on the
    *  position of π(1000) - 29 = 168 - 29 = 139. Otherwise assign single node.
    *
    {%- endcomment -%}
    {%- if n <= 139 %}
        {%- unless my_keys contains my_nodes_pos %}
            {%- assign my_rows = my_rows | push: forloop.index0 %}
            {%- assign my_keys = my_keys | push: my_nodes_pos %}
            {%- assign my_nodes = my_nodes | push: my_node %}
            {%- assign my_node = '' | split: ',' %}
        {%- endunless %}
        {%- if n == 139 %}
            {%- assign my_frame = my_nodes[my_fpos] %}
        {%- endif %}
    {%- else %}
        {%- assign my_frame = my_nodes[my_fpos] %}
    {%- endif %}
    {%- if my_frame %}
        {%- assign my_root = nil %}
        {%- break %}
    {%- endif %}
    {%- comment -%}
    *
    *  Take the root value to assign single node
    *
    {%- endcomment -%}
    {%- assign nodes = item.node | split: ';' %}
    {%- for node in nodes %}
        {%- assign n = n | plus: 1 %}
        {%- assign my_obj = node | times: 1 %}
        {%- assign my_node = my_node | push: my_obj %}
        {%- if n != my_pos %}
            {%- continue %}
        {%- else -%}
            {%- assign my_root = node | times: 1 %}
            {%- break %}
        {%- endif %}
    {%- endfor %}
    {%- if my_root %}
        {%- assign my_frame = nil %}
        {%- break %}
    {%- endif %}
{%- endfor -%}
{%- comment -%}
*
*  You may see the running code here:
*  https://www.eq19.com/feed.json
*
*  Ref:
*  https://github.com/chetabahana/r12a.github.io
*  https://gist.github.com/magicznyleszek/9803727
*  https://shopify.github.io/liquid/tags/iteration/
*  https://github.com/chetabahana/chetabahana.github.io/releases
*  https://github.com/jekyll/jekyll/issues/5868#issuecomment-278073983
*  https://www.google.com/search?q=how+to+get+element+from+multiple+array+in+jekyll
*  https://community.shopify.com/c/Shopify-Design/Remove-last-2-characters-of-a-string/td-p/236741
*
*  Note:
*  Documentation is currently available in bahasa only
*  https://github.com/chetabahana/chetabahana.github.io/wiki/18
*
{%- endcomment -%}
